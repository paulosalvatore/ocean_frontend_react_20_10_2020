{"version":3,"sources":["index.js"],"names":["Square","props","className","onClick","value","Board","i","this","squares","renderSquare","React","Component","Game","state","getInitialState","calculateWinner","currentMove","nextMove","setState","Array","fill","winner","status","handleClick","restartGame","line","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"6RAIA,SAASA,EAAOC,GACZ,OAAO,4BAAQC,UAAU,SAASC,QAASF,EAAME,SAC5CF,EAAMG,O,IAITC,E,2KACWC,GAAI,IAAD,OACZ,OAAO,kBAACN,EAAD,CAAQI,MAAOG,KAAKN,MAAMO,QAAQF,GAAIH,QAAS,kBAAM,EAAKF,MAAME,QAAQG,Q,+BAI/E,OAAO,6BACH,yBAAKJ,UAAU,aACVK,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,IAEvB,yBAAKP,UAAU,aACVK,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,IAEvB,yBAAKP,UAAU,aACVK,KAAKE,aAAa,GAClBF,KAAKE,aAAa,GAClBF,KAAKE,aAAa,S,GApBfC,IAAMC,WA0BpBC,E,kDACF,WAAYX,GAAQ,IAAD,8BACf,cAAMA,IAEDY,MAAQ,EAAKC,kBAHH,E,wDAMPR,GACR,IAAME,EAAUD,KAAKM,MAAML,QAS3B,IARoBA,EAAQF,KAQTS,EAAgBP,GAAnC,CAIA,IAAMQ,EAAcT,KAAKM,MAAMI,SAG/BT,EAAQF,GAAKU,EAIb,IAAMC,EAA2B,MAAhBD,EAAsB,IAAM,IAc7CT,KAAKW,SACD,CACIV,QAASA,EACTS,SAAUA,O,wCAwBlB,MAAO,CACHT,QAASW,MAAM,GAAGC,KAAK,MACvBH,SAAU,O,oCAKdV,KAAKW,SAASX,KAAKO,qB,+BAGb,IAAD,OACCO,EAASN,EAAgBR,KAAKM,MAAML,SAEpCS,EAAWV,KAAKM,MAAMI,SAGtBK,EAASD,EAAS,YAFI,KAAZJ,EAAkB,IAAM,KAEO,gBAAkBA,EAEjE,OACI,yBAAKf,UAAU,QACX,yBAAKA,UAAU,cACX,kBAACG,EAAD,CAAOG,QAASD,KAAKM,MAAML,QAASL,QAAS,SAACG,GAAD,OAAO,EAAKiB,YAAYjB,OAGzE,yBAAKJ,UAAU,aACX,6BAAMoB,GACN,4BAAQnB,QAAS,kBAAM,EAAKqB,gBAA5B,sB,GA/FDd,IAAMC,WA6GzB,SAASI,EAAgBP,GAYrB,IAXA,IAWA,MAXc,CACV,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,GACP,CAAC,EAAG,EAAG,IAGX,eAAwB,CAAnB,IAAIiB,EAAI,KAAW,cACFA,EADE,GACbC,EADa,KACVC,EADU,KACPC,EADO,KAGpB,GAAIpB,EAAQkB,IAAMlB,EAAQkB,KAAOlB,EAAQmB,IAAMnB,EAAQkB,KAAOlB,EAAQoB,GAClE,OAAO,EAIf,OAAO,EA3BXC,IAASC,OAEL,kBAAClB,EAAD,MAEAmB,SAASC,eAAe,W","file":"static/js/main.f27d0104.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nfunction Square(props) {\r\n    return <button className=\"square\" onClick={props.onClick}>\r\n        {props.value}\r\n    </button>;\r\n}\r\n\r\nclass Board extends React.Component {\r\n    renderSquare(i) {\r\n        return <Square value={this.props.squares[i]} onClick={() => this.props.onClick(i)}/>\r\n    }\r\n\r\n    render() {\r\n        return <div>\r\n            <div className=\"board-row\">\r\n                {this.renderSquare(0)}\r\n                {this.renderSquare(1)}\r\n                {this.renderSquare(2)}\r\n            </div>\r\n            <div className=\"board-row\">\r\n                {this.renderSquare(3)}\r\n                {this.renderSquare(4)}\r\n                {this.renderSquare(5)}\r\n            </div>\r\n            <div className=\"board-row\">\r\n                {this.renderSquare(6)}\r\n                {this.renderSquare(7)}\r\n                {this.renderSquare(8)}\r\n            </div>\r\n        </div>;\r\n    }\r\n}\r\n\r\nclass Game extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = this.getInitialState();\r\n    }\r\n\r\n    handleClick(i) {\r\n        const squares = this.state.squares;\r\n        const currentInfo = squares[i];\r\n\r\n        // Se o move for diferente de null, significa que tem uma informação lá\r\n        // Por tanto, devemos encerrar o clique imediatamente, visto que não podemos sobrescrever a informação\r\n        // A linha return faz exatamente isso, ela encerra a função handleClick\r\n        // Como qualquer texto, como \"X\" e \"O\" são truthy, ou seja, o JS entende como 'true'\r\n        //      E o if só entra quando existe uma informação 'truthy', esse if será executado\r\n        //      para qualquer informação válida, no caso, \"X\" e \"O\"\r\n        if (currentInfo || calculateWinner(squares)) {\r\n            return;\r\n        }\r\n\r\n        const currentMove = this.state.nextMove;\r\n\r\n        // Atualiza a informação do square atual com o currentMove\r\n        squares[i] = currentMove;\r\n\r\n        // Definimos o move da próxima jogada\r\n        // Se o move atual for 'X', o próximo é o 'O' e vice-versa\r\n        const nextMove = currentMove === 'X' ? 'O' : 'X'; // Operador ternário\r\n\r\n        /*\r\n        // Definimos o move da próxima jogada\r\n        let nextMove = '';\r\n        \r\n        // Se o move atual for 'X', o próximo é o 'O' e vice-versa\r\n        if (currentMove == 'X') {\r\n            nextMove = 'O';\r\n        } else {\r\n            nextMove = 'X';\r\n        }\r\n        */\r\n\r\n        this.setState(\r\n            {\r\n                squares: squares,\r\n                nextMove: nextMove\r\n            }\r\n        )\r\n\r\n        /*let move = \"\";\r\n        let nextMove = \"\";\r\n        \r\n        if (this.state.nextMove == \"X\") {\r\n            move = \"X\";\r\n            nextMove = \"O\";\r\n        } else {\r\n            move = \"O\";\r\n            nextMove = \"X\";\r\n        }\r\n\r\n        this.setState(\r\n            {\r\n                move: move,\r\n                nextMove: nextMove\r\n            }\r\n        )*/\r\n    }\r\n\r\n    getInitialState() {\r\n        return {\r\n            squares: Array(9).fill(null),\r\n            nextMove: 'X'\r\n        };\r\n    }\r\n\r\n    restartGame() {\r\n        this.setState(this.getInitialState());\r\n    }\r\n\r\n    render() {\r\n        const winner = calculateWinner(this.state.squares);\r\n\r\n        const nextMove = this.state.nextMove;\r\n        const winMove = nextMove == 'X' ? 'O' : 'X';\r\n\r\n        const status = winner ? 'Winner: ' + winMove : 'Next player: ' + nextMove;\r\n\r\n        return (\r\n            <div className=\"game\">\r\n                <div className=\"game-board\">\r\n                    <Board squares={this.state.squares} onClick={(i) => this.handleClick(i)}/>\r\n                </div>\r\n\r\n                <div className=\"game-info\">\r\n                    <div>{status}</div>\r\n                    <button onClick={() => this.restartGame()}>Restart Game</button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nReactDOM.render(\r\n    // Componente -> Elemento a ser renderizado\r\n    <Game/>,\r\n    // Em um elemento -> Container em que será renderizado\r\n    document.getElementById('root')\r\n);\r\n\r\nfunction calculateWinner(squares) {\r\n    const lines = [\r\n        [0, 1, 2],\r\n        [3, 4, 5],\r\n        [6, 7, 8],\r\n        [0, 3, 6],\r\n        [1, 4, 7],\r\n        [2, 5, 8],\r\n        [0, 4, 8],\r\n        [2, 4, 6]\r\n    ];\r\n\r\n    for (let line of lines) {\r\n        const [a, b, c] = line;\r\n\r\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    return false;\r\n}\r\n"],"sourceRoot":""}